// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`@global-modules/swc-plugin > Bundle phase > [CJS] Basics 1`] = `
"(() => {
  // src/exports.ts
  var __ref = {};
  function createExports() {
    return Object.create(__ref);
  }
  function isExports(object) {
    return Object.getPrototypeOf(object) === __ref;
  }

  // src/interop-default-export.ts
  function interopDefaultExport(module) {
    if (typeof module.exports.default === "undefined") {
      return typeof module.exports === "object" ? Object.assign(module.exports, { default: module.exports }) : { default: module.exports };
    }
    return module.exports;
  }

  // src/utils.ts
  var hasOwnProp = Object.prototype.hasOwnProperty;
  var defProp = Object.defineProperty;
  var copyProps = (destination, source, except) => {
    for (const key in source) {
      if (key !== except && hasOwnProp.call(source, key) && !hasOwnProp.call(destination, key)) {
        defProp(destination, key, {
          enumerable: true,
          get: () => source[key]
        });
      }
    }
    return destination;
  };

  // src/create-global-module.ts
  function createGlobalModule() {
    const moduleRegistry = /* @__PURE__ */ new Map();
    function __exports(exports, definitions) {
      copyProps(exports, definitions());
    }
    function require2(id) {
      const module = getModule(id);
      return module.exports.__esModule || isExports(module.exports) ? module.exports : interopDefaultExport(module);
    }
    function getModule(id) {
      const module = moduleRegistry.get(id);
      if (module == null) {
        throw new Error(\`module not found: '\${id}'\`);
      }
      return module;
    }
    function toNamespaceExports(exports) {
      const nsExports = createExports();
      copyProps(nsExports, exports, "default");
      return nsExports;
    }
    function createContext(module) {
      const exports = Object.assign(
        (definitions) => {
          __exports(module.exports, definitions);
        },
        { ns: toNamespaceExports }
      );
      return {
        exports,
        module,
        reset: () => void (module.exports = createExports())
      };
    }
    function register(id) {
      const module = {};
      module.id = id;
      module.exports = createExports();
      module.context = createContext(module);
      moduleRegistry.set(id, module);
      return module.context;
    }
    function getContext(id) {
      return getModule(id).context;
    }
    function getRegistry() {
      return moduleRegistry;
    }
    function clear() {
      moduleRegistry.clear();
    }
    return { register, getContext, getRegistry, require: require2, clear };
  }

  // src/get-global-context.ts
  function getGlobalContext() {
    return typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : this;
  }

  // src/index.ts
  var GLOBAL_MODULE_PROPERTY = "__modules";
  var globalContext = getGlobalContext();
  if (GLOBAL_MODULE_PROPERTY in globalContext) {
    throw new Error(
      \`'\${GLOBAL_MODULE_PROPERTY}' property is already defined in the global context.\`
    );
  }
  if (typeof global === "undefined") {
    globalContext.global = globalContext;
  }
  Object.defineProperty(globalContext, GLOBAL_MODULE_PROPERTY, {
    value: createGlobalModule()
  });
})();

(() => {
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };

  // foo-linker:foo
  var require_foo = __commonJS({
    "foo-linker:foo"(exports, module) {
      var __ctx = global.__modules.register("0");
      var foo = "foo";
      var bar = "bar";
      var value = "baz";
      if (true) {
        module.exports = __ctx.module.exports = {
          foo,
          bar,
          baz: value
        };
      }
    }
  });

  // <stdin>
  var mod = require_foo();
  bridge(mod);
})();
"
`;

exports[`@global-modules/swc-plugin > Bundle phase > [ESM] Basics 1`] = `
"(() => {
  // src/exports.ts
  var __ref = {};
  function createExports() {
    return Object.create(__ref);
  }
  function isExports(object) {
    return Object.getPrototypeOf(object) === __ref;
  }

  // src/interop-default-export.ts
  function interopDefaultExport(module) {
    if (typeof module.exports.default === "undefined") {
      return typeof module.exports === "object" ? Object.assign(module.exports, { default: module.exports }) : { default: module.exports };
    }
    return module.exports;
  }

  // src/utils.ts
  var hasOwnProp = Object.prototype.hasOwnProperty;
  var defProp = Object.defineProperty;
  var copyProps = (destination, source, except) => {
    for (const key in source) {
      if (key !== except && hasOwnProp.call(source, key) && !hasOwnProp.call(destination, key)) {
        defProp(destination, key, {
          enumerable: true,
          get: () => source[key]
        });
      }
    }
    return destination;
  };

  // src/create-global-module.ts
  function createGlobalModule() {
    const moduleRegistry = /* @__PURE__ */ new Map();
    function __exports(exports, definitions) {
      copyProps(exports, definitions());
    }
    function require2(id) {
      const module = getModule(id);
      return module.exports.__esModule || isExports(module.exports) ? module.exports : interopDefaultExport(module);
    }
    function getModule(id) {
      const module = moduleRegistry.get(id);
      if (module == null) {
        throw new Error(\`module not found: '\${id}'\`);
      }
      return module;
    }
    function toNamespaceExports(exports) {
      const nsExports = createExports();
      copyProps(nsExports, exports, "default");
      return nsExports;
    }
    function createContext(module) {
      const exports = Object.assign(
        (definitions) => {
          __exports(module.exports, definitions);
        },
        { ns: toNamespaceExports }
      );
      return {
        exports,
        module,
        reset: () => void (module.exports = createExports())
      };
    }
    function register(id) {
      const module = {};
      module.id = id;
      module.exports = createExports();
      module.context = createContext(module);
      moduleRegistry.set(id, module);
      return module.context;
    }
    function getContext(id) {
      return getModule(id).context;
    }
    function getRegistry() {
      return moduleRegistry;
    }
    function clear() {
      moduleRegistry.clear();
    }
    return { register, getContext, getRegistry, require: require2, clear };
  }

  // src/get-global-context.ts
  function getGlobalContext() {
    return typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : this;
  }

  // src/index.ts
  var GLOBAL_MODULE_PROPERTY = "__modules";
  var globalContext = getGlobalContext();
  if (GLOBAL_MODULE_PROPERTY in globalContext) {
    throw new Error(
      \`'\${GLOBAL_MODULE_PROPERTY}' property is already defined in the global context.\`
    );
  }
  if (typeof global === "undefined") {
    globalContext.global = globalContext;
  }
  Object.defineProperty(globalContext, GLOBAL_MODULE_PROPERTY, {
    value: createGlobalModule()
  });
})();

(() => {
  var __defProp = Object.defineProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };

  // foo-linker:foo
  var foo_exports = {};
  __export(foo_exports, {
    bar: () => bar,
    baz: () => value,
    default: () => foo_default,
    foo: () => __x1
  });
  var __ctx = global.__modules.register("0");
  var foo = "foo";
  var bar = "bar";
  var value = "baz";
  var foo = "foo";
  __x1 = foo;
  __ctx.exports(function() {
    return {
      "default": __x,
      "foo": __x1,
      "bar": bar,
      "baz": value
    };
  });
  var __x;
  var __x1;
  var foo_default = __x = 1;

  // <stdin>
  bridge(foo_exports);
})();
"
`;

exports[`@global-modules/swc-plugin > Bundle phase > [ESM] Export with declaration statements 1`] = `
"(() => {
  // src/exports.ts
  var __ref = {};
  function createExports() {
    return Object.create(__ref);
  }
  function isExports(object) {
    return Object.getPrototypeOf(object) === __ref;
  }

  // src/interop-default-export.ts
  function interopDefaultExport(module) {
    if (typeof module.exports.default === "undefined") {
      return typeof module.exports === "object" ? Object.assign(module.exports, { default: module.exports }) : { default: module.exports };
    }
    return module.exports;
  }

  // src/utils.ts
  var hasOwnProp = Object.prototype.hasOwnProperty;
  var defProp = Object.defineProperty;
  var copyProps = (destination, source, except) => {
    for (const key in source) {
      if (key !== except && hasOwnProp.call(source, key) && !hasOwnProp.call(destination, key)) {
        defProp(destination, key, {
          enumerable: true,
          get: () => source[key]
        });
      }
    }
    return destination;
  };

  // src/create-global-module.ts
  function createGlobalModule() {
    const moduleRegistry = /* @__PURE__ */ new Map();
    function __exports(exports, definitions) {
      copyProps(exports, definitions());
    }
    function require2(id) {
      const module = getModule(id);
      return module.exports.__esModule || isExports(module.exports) ? module.exports : interopDefaultExport(module);
    }
    function getModule(id) {
      const module = moduleRegistry.get(id);
      if (module == null) {
        throw new Error(\`module not found: '\${id}'\`);
      }
      return module;
    }
    function toNamespaceExports(exports) {
      const nsExports = createExports();
      copyProps(nsExports, exports, "default");
      return nsExports;
    }
    function createContext(module) {
      const exports = Object.assign(
        (definitions) => {
          __exports(module.exports, definitions);
        },
        { ns: toNamespaceExports }
      );
      return {
        exports,
        module,
        reset: () => void (module.exports = createExports())
      };
    }
    function register(id) {
      const module = {};
      module.id = id;
      module.exports = createExports();
      module.context = createContext(module);
      moduleRegistry.set(id, module);
      return module.context;
    }
    function getContext(id) {
      return getModule(id).context;
    }
    function getRegistry() {
      return moduleRegistry;
    }
    function clear() {
      moduleRegistry.clear();
    }
    return { register, getContext, getRegistry, require: require2, clear };
  }

  // src/get-global-context.ts
  function getGlobalContext() {
    return typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : this;
  }

  // src/index.ts
  var GLOBAL_MODULE_PROPERTY = "__modules";
  var globalContext = getGlobalContext();
  if (GLOBAL_MODULE_PROPERTY in globalContext) {
    throw new Error(
      \`'\${GLOBAL_MODULE_PROPERTY}' property is already defined in the global context.\`
    );
  }
  if (typeof global === "undefined") {
    globalContext.global = globalContext;
  }
  Object.defineProperty(globalContext, GLOBAL_MODULE_PROPERTY, {
    value: createGlobalModule()
  });
})();

(() => {
  // foo-linker:foo
  var __ctx = global.__modules.register("0");
  var obj = {
    value: 0
  };
  var newObj = obj;
  newObj.key = "key";
  __x = newObj;
  __ctx.exports(function() {
    return {
      "newObj": __x
    };
  });
  var __x;

  // <stdin>
  bridge(__x);
})();
"
`;

exports[`@global-modules/swc-plugin > Runtime phase > [CJS] Basics 1`] = `
"(() => {
  // src/exports.ts
  var __ref = {};
  function createExports() {
    return Object.create(__ref);
  }
  function isExports(object) {
    return Object.getPrototypeOf(object) === __ref;
  }

  // src/interop-default-export.ts
  function interopDefaultExport(module) {
    if (typeof module.exports.default === "undefined") {
      return typeof module.exports === "object" ? Object.assign(module.exports, { default: module.exports }) : { default: module.exports };
    }
    return module.exports;
  }

  // src/utils.ts
  var hasOwnProp = Object.prototype.hasOwnProperty;
  var defProp = Object.defineProperty;
  var copyProps = (destination, source, except) => {
    for (const key in source) {
      if (key !== except && hasOwnProp.call(source, key) && !hasOwnProp.call(destination, key)) {
        defProp(destination, key, {
          enumerable: true,
          get: () => source[key]
        });
      }
    }
    return destination;
  };

  // src/create-global-module.ts
  function createGlobalModule() {
    const moduleRegistry = /* @__PURE__ */ new Map();
    function __exports(exports, definitions) {
      copyProps(exports, definitions());
    }
    function require2(id) {
      const module = getModule(id);
      return module.exports.__esModule || isExports(module.exports) ? module.exports : interopDefaultExport(module);
    }
    function getModule(id) {
      const module = moduleRegistry.get(id);
      if (module == null) {
        throw new Error(\`module not found: '\${id}'\`);
      }
      return module;
    }
    function toNamespaceExports(exports) {
      const nsExports = createExports();
      copyProps(nsExports, exports, "default");
      return nsExports;
    }
    function createContext(module) {
      const exports = Object.assign(
        (definitions) => {
          __exports(module.exports, definitions);
        },
        { ns: toNamespaceExports }
      );
      return {
        exports,
        module,
        reset: () => void (module.exports = createExports())
      };
    }
    function register(id) {
      const module = {};
      module.id = id;
      module.exports = createExports();
      module.context = createContext(module);
      moduleRegistry.set(id, module);
      return module.context;
    }
    function getContext(id) {
      return getModule(id).context;
    }
    function getRegistry() {
      return moduleRegistry;
    }
    function clear() {
      moduleRegistry.clear();
    }
    return { register, getContext, getRegistry, require: require2, clear };
  }

  // src/get-global-context.ts
  function getGlobalContext() {
    return typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : this;
  }

  // src/index.ts
  var GLOBAL_MODULE_PROPERTY = "__modules";
  var globalContext = getGlobalContext();
  if (GLOBAL_MODULE_PROPERTY in globalContext) {
    throw new Error(
      \`'\${GLOBAL_MODULE_PROPERTY}' property is already defined in the global context.\`
    );
  }
  if (typeof global === "undefined") {
    globalContext.global = globalContext;
  }
  Object.defineProperty(globalContext, GLOBAL_MODULE_PROPERTY, {
    value: createGlobalModule()
  });
})();

global.__modules.register('0');
(() => {
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };

  // foo-linker:foo
  var require_foo = __commonJS({
    "foo-linker:foo"() {
      var __ctx = global.__modules.getContext("0");
      __ctx.reset();
      var foo = "foo";
      var bar = "bar";
      var value = "baz";
      if (true) {
        __ctx.module.exports = {
          foo,
          bar,
          baz: value
        };
      }
    }
  });

  // <stdin>
  var mod = require_foo();
  bridge(global.__modules.getContext("0").module.exports);
})();
"
`;

exports[`@global-modules/swc-plugin > Runtime phase > [ESM] Basics 1`] = `
"(() => {
  // src/exports.ts
  var __ref = {};
  function createExports() {
    return Object.create(__ref);
  }
  function isExports(object) {
    return Object.getPrototypeOf(object) === __ref;
  }

  // src/interop-default-export.ts
  function interopDefaultExport(module) {
    if (typeof module.exports.default === "undefined") {
      return typeof module.exports === "object" ? Object.assign(module.exports, { default: module.exports }) : { default: module.exports };
    }
    return module.exports;
  }

  // src/utils.ts
  var hasOwnProp = Object.prototype.hasOwnProperty;
  var defProp = Object.defineProperty;
  var copyProps = (destination, source, except) => {
    for (const key in source) {
      if (key !== except && hasOwnProp.call(source, key) && !hasOwnProp.call(destination, key)) {
        defProp(destination, key, {
          enumerable: true,
          get: () => source[key]
        });
      }
    }
    return destination;
  };

  // src/create-global-module.ts
  function createGlobalModule() {
    const moduleRegistry = /* @__PURE__ */ new Map();
    function __exports(exports, definitions) {
      copyProps(exports, definitions());
    }
    function require2(id) {
      const module = getModule(id);
      return module.exports.__esModule || isExports(module.exports) ? module.exports : interopDefaultExport(module);
    }
    function getModule(id) {
      const module = moduleRegistry.get(id);
      if (module == null) {
        throw new Error(\`module not found: '\${id}'\`);
      }
      return module;
    }
    function toNamespaceExports(exports) {
      const nsExports = createExports();
      copyProps(nsExports, exports, "default");
      return nsExports;
    }
    function createContext(module) {
      const exports = Object.assign(
        (definitions) => {
          __exports(module.exports, definitions);
        },
        { ns: toNamespaceExports }
      );
      return {
        exports,
        module,
        reset: () => void (module.exports = createExports())
      };
    }
    function register(id) {
      const module = {};
      module.id = id;
      module.exports = createExports();
      module.context = createContext(module);
      moduleRegistry.set(id, module);
      return module.context;
    }
    function getContext(id) {
      return getModule(id).context;
    }
    function getRegistry() {
      return moduleRegistry;
    }
    function clear() {
      moduleRegistry.clear();
    }
    return { register, getContext, getRegistry, require: require2, clear };
  }

  // src/get-global-context.ts
  function getGlobalContext() {
    return typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : this;
  }

  // src/index.ts
  var GLOBAL_MODULE_PROPERTY = "__modules";
  var globalContext = getGlobalContext();
  if (GLOBAL_MODULE_PROPERTY in globalContext) {
    throw new Error(
      \`'\${GLOBAL_MODULE_PROPERTY}' property is already defined in the global context.\`
    );
  }
  if (typeof global === "undefined") {
    globalContext.global = globalContext;
  }
  Object.defineProperty(globalContext, GLOBAL_MODULE_PROPERTY, {
    value: createGlobalModule()
  });
})();

global.__modules.register('0');
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));

  // foo-linker:foo
  var require_foo = __commonJS({
    "foo-linker:foo"() {
      var __ctx = global.__modules.getContext("0");
      __ctx.reset();
      var foo = "foo";
      var bar = "bar";
      var value = "baz";
      __x = 1;
      var foo = "foo";
      __x1 = foo;
      __ctx.exports(function() {
        return {
          "default": __x,
          "foo": __x1,
          "bar": bar,
          "baz": value
        };
      });
      var __x;
      var __x1;
    }
  });

  // <stdin>
  var mod = __toESM(require_foo());
  bridge(global.__modules.getContext("0").module.exports);
})();
"
`;

exports[`@global-modules/swc-plugin > Runtime phase > [ESM] Export with declaration statements 1`] = `
"(() => {
  // src/exports.ts
  var __ref = {};
  function createExports() {
    return Object.create(__ref);
  }
  function isExports(object) {
    return Object.getPrototypeOf(object) === __ref;
  }

  // src/interop-default-export.ts
  function interopDefaultExport(module) {
    if (typeof module.exports.default === "undefined") {
      return typeof module.exports === "object" ? Object.assign(module.exports, { default: module.exports }) : { default: module.exports };
    }
    return module.exports;
  }

  // src/utils.ts
  var hasOwnProp = Object.prototype.hasOwnProperty;
  var defProp = Object.defineProperty;
  var copyProps = (destination, source, except) => {
    for (const key in source) {
      if (key !== except && hasOwnProp.call(source, key) && !hasOwnProp.call(destination, key)) {
        defProp(destination, key, {
          enumerable: true,
          get: () => source[key]
        });
      }
    }
    return destination;
  };

  // src/create-global-module.ts
  function createGlobalModule() {
    const moduleRegistry = /* @__PURE__ */ new Map();
    function __exports(exports, definitions) {
      copyProps(exports, definitions());
    }
    function require2(id) {
      const module = getModule(id);
      return module.exports.__esModule || isExports(module.exports) ? module.exports : interopDefaultExport(module);
    }
    function getModule(id) {
      const module = moduleRegistry.get(id);
      if (module == null) {
        throw new Error(\`module not found: '\${id}'\`);
      }
      return module;
    }
    function toNamespaceExports(exports) {
      const nsExports = createExports();
      copyProps(nsExports, exports, "default");
      return nsExports;
    }
    function createContext(module) {
      const exports = Object.assign(
        (definitions) => {
          __exports(module.exports, definitions);
        },
        { ns: toNamespaceExports }
      );
      return {
        exports,
        module,
        reset: () => void (module.exports = createExports())
      };
    }
    function register(id) {
      const module = {};
      module.id = id;
      module.exports = createExports();
      module.context = createContext(module);
      moduleRegistry.set(id, module);
      return module.context;
    }
    function getContext(id) {
      return getModule(id).context;
    }
    function getRegistry() {
      return moduleRegistry;
    }
    function clear() {
      moduleRegistry.clear();
    }
    return { register, getContext, getRegistry, require: require2, clear };
  }

  // src/get-global-context.ts
  function getGlobalContext() {
    return typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : this;
  }

  // src/index.ts
  var GLOBAL_MODULE_PROPERTY = "__modules";
  var globalContext = getGlobalContext();
  if (GLOBAL_MODULE_PROPERTY in globalContext) {
    throw new Error(
      \`'\${GLOBAL_MODULE_PROPERTY}' property is already defined in the global context.\`
    );
  }
  if (typeof global === "undefined") {
    globalContext.global = globalContext;
  }
  Object.defineProperty(globalContext, GLOBAL_MODULE_PROPERTY, {
    value: createGlobalModule()
  });
})();

global.__modules.register('0');
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));

  // foo-linker:foo
  var require_foo = __commonJS({
    "foo-linker:foo"() {
      var __ctx = global.__modules.getContext("0");
      __ctx.reset();
      var obj = {
        value: 0
      };
      var newObj = obj;
      newObj.key = "key";
      __x = newObj;
      __ctx.exports(function() {
        return {
          "newObj": __x
        };
      });
      var __x;
    }
  });

  // <stdin>
  var mod = __toESM(require_foo());
  bridge(global.__modules.getContext("0").module.exports);
})();
"
`;
